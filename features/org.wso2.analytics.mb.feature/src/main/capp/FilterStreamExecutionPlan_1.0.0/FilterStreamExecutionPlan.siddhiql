/* Enter a unique ExecutionPlan */
@Plan:name('FilterStreamExecutionPlan')

/* Enter a unique description for ExecutionPlan */
-- @Plan:description('ExecutionPlan')

/* define streams/tables and write queries here ... */

@Import('org.wso2.metrics.stream.Timer:1.0.0')
define stream metricTimerStream (meta_timestamp long, source string, name string, count long, max double, mean double, min double, stddev double, median double, percentile_75th double, percentile_95th double, percentile_98th double, percentile_99th double, percentile_999th double, mean_rate double, one_minute_rate double, five_minute_rate double, fifteen_minute_rate double, rate_unit string, duration_unit string);

@Import('org.wso2.metrics.stream.Meter:1.0.0')
define stream metricMeterStream (meta_timestamp long, source string, name string, count long, mean_rate double, one_minute_rate double, five_minute_rate double, fifteen_minute_rate double, rate_unit string);

@Import('org.wso2.metrics.stream.Gauge:1.0.0')
define stream metricGaugeStream (meta_timestamp long, source string, name string, value double);

@Import('org.wso2.metrics.stream.Counter:1.0.0')
define stream metricCounterStream (meta_timestamp long, source string, name string, count long);

@Export('org.wso2.mb.timer.stats.minute:1.0.0')
define stream mbTimerStatsMinute (year int, month int, day int, hour int, minute int, source string, name string, type string, destination string, maxDuration double, meanDuration double, rate double, _timestamp long);

@Export('org.wso2.mb.meter.stats.minute:1.0.0')
define stream mbMeterStatsMinute (year int, month int, day int, hour int, minute int, source string, name string, type string, destination string, rate double, _timestamp long);

@Export('org.wso2.mb.gauge.stats.minute:1.0.0')
define stream mbGaugeStatsMinute (year int, month int, day int, hour int, minute int, source string, name string, type string, destination string, value double, _timestamp long);

@Export('org.wso2.mb.counter.stats.minute:1.0.0')
define stream mbCounterStatsMinute (year int, month int, day int, hour int, minute int, source string, name string, type string, destination string, totalCount long, _timestamp long);

from metricTimerStream[str:contains(name, 'org.wso2.mb.database.read') or str:contains(name, 'org.wso2.mb.database.write')]#mbAnalytics:formatStream(meta_timestamp, name)
select year, month, day, hour, minute, source, name, type, destination, max as maxDuration, mean as meanDuration, one_minute_rate as rate, meta_timestamp as _timestamp
insert into mbTimerStatsMinute;

from metricMeterStream[str:contains(name, 'org.wso2.mb.message.receive') or str:contains(name, 'org.wso2.mb.message.sent')]#mbAnalytics:formatStream(meta_timestamp, name)
select year, month, day, hour, minute, source, name, type, destination, one_minute_rate as rate, meta_timestamp as _timestamp
insert into mbMeterStatsMinute;

from metricGaugeStream[str:contains(name, 'org.wso2.mb.channels.active.count') or str:contains(name, 'org.wso2.mb.queue.subscribers.count') or str:contains(name, 'org.wso2.mb.topic.subscribers.count')]#mbAnalytics:formatStream(meta_timestamp, name)
select year, month, day, hour, minute, source, name, type, destination, value, meta_timestamp as _timestamp
insert into mbGaugeStatsMinute;

from metricCounterStream [str:contains(name, 'org.wso2.mb.enqueue.count') or str:contains(name, 'org.wso2.mb.dequeue.count') or str:contains(name, 'org.wso2.mb.ack.count') or str:contains(name, 'org.wso2.mb.reject.count')]#mbAnalytics:formatStream(meta_timestamp, name)
select year, month, day, hour, minute, source, name, type, destination, count as totalCount, meta_timestamp as _timestamp
insert into mbCounterStatsMinute;